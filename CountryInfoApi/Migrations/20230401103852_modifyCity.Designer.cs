// <auto-generated />
using System;
using CountryInfoApi.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CountryInfoApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230401103852_modifyCity")]
    partial class modifyCity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CountryInfoApi.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CountryInfoApi.Models.CityImg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityImgs");
                });

            modelBuilder.Entity("CountryInfoApi.Models.PlaceImg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecomendedPlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecomendedPlaceId");

                    b.ToTable("PlaceImgs");
                });

            modelBuilder.Entity("CountryInfoApi.Models.RecomendedPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("RecomendedPlaces");
                });

            modelBuilder.Entity("CountryInfoApi.Models.CityImg", b =>
                {
                    b.HasOne("CountryInfoApi.Models.City", "City")
                        .WithMany("CityImgs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CountryInfoApi.Models.PlaceImg", b =>
                {
                    b.HasOne("CountryInfoApi.Models.RecomendedPlace", "RecomendedPlace")
                        .WithMany("PlaceImgs")
                        .HasForeignKey("RecomendedPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecomendedPlace");
                });

            modelBuilder.Entity("CountryInfoApi.Models.RecomendedPlace", b =>
                {
                    b.HasOne("CountryInfoApi.Models.City", "City")
                        .WithMany("RecomendedPlaces")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CountryInfoApi.Models.City", b =>
                {
                    b.Navigation("CityImgs");

                    b.Navigation("RecomendedPlaces");
                });

            modelBuilder.Entity("CountryInfoApi.Models.RecomendedPlace", b =>
                {
                    b.Navigation("PlaceImgs");
                });
#pragma warning restore 612, 618
        }
    }
}
